##TEMPLATE-NAME 'Javascript OO Engine'
##LANGUAGE 'Javascript'
##ENGINE-NAME 'Javascript OO Engine'
##AUTHOR 'Reinier Nápoles Martínez'
##FILE-EXTENSION 'js'
##NOTES

The template was based on the Kessels engine.

This template creates a .js file for use by the JS Engine.
The complete CGT (Compiled Grammar Table) is hardcoded into the .js
file, so initializing the engine is very fast (it does not have
to load the CGT file from disk).

This template creates the source for a bare-bones interpreter. The
resulting code is executable and will show the progress of the
interpreter as it executes an input script.

##END-NOTES
##ID-SEPARATOR '_'
##ID-SYMBOL-PREFIX 'Symbol'
##ID-RULE-PREFIX 'rule'
##DELIMITER ','
/*
##PARAMETERS
Name             : %Name%
Version          : %Version%
Author           : %Author%
About            : %About%
Case Sensitive   : %CaseSensitive%
Start Symbol     : %StartSymbol%

Character Set     : %Character-Set%
Character Mapping : %Character-Mapping%
Generated By      : %Generated-By%
Generated Date    : %Generated-Date%
##END-PARAMETERS 

Output File      : %OutputFile% 
Output File Base : %OutputFileBase% 


This file was generated by the Gold Parser.
The template is Javascript OO Engine

*/

##PARAMETERS
const Base%Name% = require('./Base%Name%');

class %Name% extends Base%Name% {
##END-PARAMETERS 

  parse() {

    let result = this.parseInput();

    /* Interpret the results. */
    if (result != this.PARSE_ACCEPT) {
      this.showErrorMessage(result);
    } else {
      if(this.firstToken){
        /* Start execution by calling the subroutine of the first Token on
         the TokenStack. It's the "Start Symbol" that is defined in the
         grammar. 
        */
        this.result = this.callRule(this.firstToken);
      }
    }

  }

  callRule(token)
  {
  
    const index = token.reductionRule;
    const tokens = token.tokens;

    switch (index)
    {
##RULES
      case %Index%:
        //%Description%
        return this.callRule(tokens[0]);
      break;
##END-RULES
      default:
        throw new Error("Unknown rule");
    }

  }

}


##PARAMETERS
module.exports = %Name%;
##END-PARAMETERS