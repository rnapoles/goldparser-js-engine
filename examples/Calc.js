/*
Name             : Calc
Version          : 0.01
Author           : GOLD Parser Builder and Nick Sabalausky
About            : Basic Calculator Grammar
Case Sensitive   : 
Start Symbol     : 

Character Set     : Unicode
Character Mapping : Windows-1252
Generated By      : GOLD Parser Builder 5.2.0.
Generated Date    : 2021-12-15 17:25

Output File      : Calc.js 
Output File Base : Calc 


This file was generated by the Gold Parser.
The template is Javascript OO Engine

*/

const BaseCalc = require('./BaseCalc');

class Calc extends BaseCalc {

  parse() {

    let result = this.parseInput();

    /* Interpret the results. */
    if (result != this.PARSE_ACCEPT) {
      this.showErrorMessage(result);
    } else {
      if(this.firstToken){
        /* Start execution by calling the subroutine of the first Token on
         the TokenStack. It's the "Start Symbol" that is defined in the
         grammar. 
        */
        this.result = this.callRule(this.firstToken);
      }
    }

  }

  callRule(token, ctx)
  {
  
    const index = token.reductionRule;
    const tokens = token.tokens;

    switch (index)
    {
      case 0:
        //<Add Exp> ::= <Add Exp> '+' <Mult Exp>
        return this.callRule(tokens[0],ctx) + this.callRule(tokens[2],ctx);
      break;
      case 1:
        //<Add Exp> ::= <Add Exp> '-' <Mult Exp>
        return this.callRule(tokens[0],ctx) - this.callRule(tokens[2],ctx);
      break;
      case 2:
        //<Add Exp> ::= <Mult Exp>
        return this.callRule(tokens[0],ctx);
      break;
      case 3:
        //<Mult Exp> ::= <Mult Exp> '*' <Negate Exp>
        return this.callRule(tokens[0],ctx) * this.callRule(tokens[2],ctx);
      break;
      case 4:
        //<Mult Exp> ::= <Mult Exp> '/' <Negate Exp>
        return this.callRule(tokens[0],ctx) / this.callRule(tokens[2],ctx);
      break;
      case 5:
        //<Mult Exp> ::= <Negate Exp>
        return this.callRule(tokens[0],ctx);
      break;
      case 6:
        //<Negate Exp> ::= '-' <Value>
        return this.callRule(tokens[1],ctx) * -1;
      break;
      case 7:
        //<Negate Exp> ::= <Value>
        return this.callRule(tokens[0],ctx);
      break;
      case 8:
        //<Value> ::= Number
        return Number(tokens[0].data);
      break;
      case 9:
        //<Value> ::= '(' <Add Exp> ')'
        return this.callRule(tokens[1],ctx);
      break;
      default:
        throw new Error("Unknown rule");
    }
  }

}


module.exports = Calc;
