/*
Name             : Calc
Version          : 0.01
Author           : GOLD Parser Builder and Nick Sabalausky
About            : Basic Calculator Grammar
Case Sensitive   : 
Start Symbol     : 

Character Set     : Unicode
Character Mapping : Windows-1252
Generated By      : GOLD Parser Builder 5.2.0.
Generated Date    : 2021-12-15 17:21


Output File      : BaseCalc.js 
Output File Base : BaseCalc 

This file was generated by the Gold Parser.
The template is Javascript OO Engine

*/

const Action = require('../lib/engine/Action');
const Context = require('../lib/engine/Context');
const DfaEdge = require('../lib/engine/DfaEdge');
const DfaState = require('../lib/engine/DfaState');
const Grammar = require('../lib/engine/Grammar');
const LalrState = require('../lib/engine/LalrState');
const Rule = require('../lib/engine/Rule');
const Symbol = require('../lib/engine/Symbol');
const AbstractParser = require('../lib/AbstractParser');

class BaseCalc extends AbstractParser {

  parse() {

    let ctx = new Context();
    let result = this.parseInput();

    /* Interpret the results. */
    if (result != this.PARSE_ACCEPT) {
      this.showErrorMessage(result);
    } else {
      if(this.firstToken){
        /* Initialize the Context. */
        ctx.debug = this.debug;
        ctx.indent = 0;
        ctx.returnValue = null;

        /* Start execution by calling the subroutine of the first Token on
         the TokenStack. It's the "Start Symbol" that is defined in the
         grammar. 
        */
        let fn = this.ruleJumpTable[this.firstToken.reductionRule];
        this[fn](this.firstToken,ctx);
      }
    }

  }

  /***** Rule subroutines *****************************************************/

  /* 
    Symbol Count: 3
    <Add Exp> ::= <Add Exp> '+' <Mult Exp> 
    TokenType token
    Context ctx
  */
  rule_AddExp_Plus(token,ctx) {
  
    if (ctx.debug >= 2) {
      this.log("Calling rule_AddExp_Plus\n");
    }
    
    /*
    //^ <Add Exp> ::= <Add Exp> '+' <Mult Exp>
    */
    this.debugRule(token,ctx); //Replace with your code
  }

  /* 
    Symbol Count: 3
    <Add Exp> ::= <Add Exp> '-' <Mult Exp> 
    TokenType token
    Context ctx
  */
  rule_AddExp_Minus(token,ctx) {
  
    if (ctx.debug >= 2) {
      this.log("Calling rule_AddExp_Minus\n");
    }
    
    /*
    //^ <Add Exp> ::= <Add Exp> '-' <Mult Exp>
    */
    this.debugRule(token,ctx); //Replace with your code
  }

  /* 
    Symbol Count: 1
    <Add Exp> ::= <Mult Exp> 
    TokenType token
    Context ctx
  */
  rule_AddExp(token,ctx) {
  
    if (ctx.debug >= 2) {
      this.log("Calling rule_AddExp\n");
    }
    
    /*
    //^ <Add Exp> ::= <Mult Exp>
    */
    this.debugRule(token,ctx); //Replace with your code
  }

  /* 
    Symbol Count: 3
    <Mult Exp> ::= <Mult Exp> '*' <Negate Exp> 
    TokenType token
    Context ctx
  */
  rule_MultExp_Times(token,ctx) {
  
    if (ctx.debug >= 2) {
      this.log("Calling rule_MultExp_Times\n");
    }
    
    /*
    //^ <Mult Exp> ::= <Mult Exp> '*' <Negate Exp>
    */
    this.debugRule(token,ctx); //Replace with your code
  }

  /* 
    Symbol Count: 3
    <Mult Exp> ::= <Mult Exp> '/' <Negate Exp> 
    TokenType token
    Context ctx
  */
  rule_MultExp_Div(token,ctx) {
  
    if (ctx.debug >= 2) {
      this.log("Calling rule_MultExp_Div\n");
    }
    
    /*
    //^ <Mult Exp> ::= <Mult Exp> '/' <Negate Exp>
    */
    this.debugRule(token,ctx); //Replace with your code
  }

  /* 
    Symbol Count: 1
    <Mult Exp> ::= <Negate Exp> 
    TokenType token
    Context ctx
  */
  rule_MultExp(token,ctx) {
  
    if (ctx.debug >= 2) {
      this.log("Calling rule_MultExp\n");
    }
    
    /*
    //^ <Mult Exp> ::= <Negate Exp>
    */
    this.debugRule(token,ctx); //Replace with your code
  }

  /* 
    Symbol Count: 2
    <Negate Exp> ::= '-' <Value> 
    TokenType token
    Context ctx
  */
  rule_NegateExp_Minus(token,ctx) {
  
    if (ctx.debug >= 2) {
      this.log("Calling rule_NegateExp_Minus\n");
    }
    
    /*
    //^ <Negate Exp> ::= '-' <Value>
    */
    this.debugRule(token,ctx); //Replace with your code
  }

  /* 
    Symbol Count: 1
    <Negate Exp> ::= <Value> 
    TokenType token
    Context ctx
  */
  rule_NegateExp(token,ctx) {
  
    if (ctx.debug >= 2) {
      this.log("Calling rule_NegateExp\n");
    }
    
    /*
    //^ <Negate Exp> ::= <Value>
    */
    this.debugRule(token,ctx); //Replace with your code
  }

  /* 
    Symbol Count: 1
    <Value> ::= Number 
    TokenType token
    Context ctx
  */
  rule_Value_Number(token,ctx) {
  
    if (ctx.debug >= 2) {
      this.log("Calling rule_Value_Number\n");
    }
    
    /*
    //^ <Value> ::= Number
    */
    this.debugRule(token,ctx); //Replace with your code
  }

  /* 
    Symbol Count: 3
    <Value> ::= '(' <Add Exp> ')' 
    TokenType token
    Context ctx
  */
  rule_Value_LParen_RParen(token,ctx) {
  
    if (ctx.debug >= 2) {
      this.log("Calling rule_Value_LParen_RParen\n");
    }
    
    /*
    //^ <Value> ::= '(' <Add Exp> ')'
    */
    this.debugRule(token,ctx); //Replace with your code
  }


  initGrammar(){

    let grammarCharset0CharCount = 7;
    let grammarCharset0 = [
      9,
      10,
      11,
      12,
      13,
      32,
      160,
      0
    ];

    let grammarCharset1CharCount = 1;
    let grammarCharset1 = [
      40,
      0
    ];

    let grammarCharset2CharCount = 1;
    let grammarCharset2 = [
      41,
      0
    ];

    let grammarCharset3CharCount = 1;
    let grammarCharset3 = [
      42,
      0
    ];

    let grammarCharset4CharCount = 1;
    let grammarCharset4 = [
      43,
      0
    ];

    let grammarCharset5CharCount = 1;
    let grammarCharset5 = [
      45,
      0
    ];

    let grammarCharset6CharCount = 1;
    let grammarCharset6 = [
      47,
      0
    ];

    let grammarCharset7CharCount = 10;
    let grammarCharset7 = [
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      0
    ];


    let grammarDfaEdgeArray0 = [
      new DfaEdge(1,grammarCharset0CharCount,grammarCharset0),
      new DfaEdge(2,grammarCharset1CharCount,grammarCharset1),
      new DfaEdge(3,grammarCharset2CharCount,grammarCharset2),
      new DfaEdge(4,grammarCharset3CharCount,grammarCharset3),
      new DfaEdge(5,grammarCharset4CharCount,grammarCharset4),
      new DfaEdge(6,grammarCharset5CharCount,grammarCharset5),
      new DfaEdge(7,grammarCharset6CharCount,grammarCharset6),
      new DfaEdge(8,grammarCharset7CharCount,grammarCharset7),
      new DfaEdge(-1,0,null)
    ];

    let grammarDfaEdgeArray1 = [
      new DfaEdge(1,grammarCharset0CharCount,grammarCharset0),
      new DfaEdge(-1,0,null)
    ];

    let grammarDfaEdgeArray2 = [
      new DfaEdge(-1,0,null)
    ];

    let grammarDfaEdgeArray3 = [
      new DfaEdge(-1,0,null)
    ];

    let grammarDfaEdgeArray4 = [
      new DfaEdge(-1,0,null)
    ];

    let grammarDfaEdgeArray5 = [
      new DfaEdge(-1,0,null)
    ];

    let grammarDfaEdgeArray6 = [
      new DfaEdge(-1,0,null)
    ];

    let grammarDfaEdgeArray7 = [
      new DfaEdge(-1,0,null)
    ];

    let grammarDfaEdgeArray8 = [
      new DfaEdge(8,grammarCharset7CharCount,grammarCharset7),
      new DfaEdge(-1,0,null)
    ];


    let grammarRulesymbolArray0 = [
      10,
      6,
      11,
      -1
    ];

    let grammarRulesymbolArray1 = [
      10,
      7,
      11,
      -1
    ];

    let grammarRulesymbolArray2 = [
      11,
      -1
    ];

    let grammarRulesymbolArray3 = [
      11,
      5,
      12,
      -1
    ];

    let grammarRulesymbolArray4 = [
      11,
      8,
      12,
      -1
    ];

    let grammarRulesymbolArray5 = [
      12,
      -1
    ];

    let grammarRulesymbolArray6 = [
      7,
      13,
      -1
    ];

    let grammarRulesymbolArray7 = [
      13,
      -1
    ];

    let grammarRulesymbolArray8 = [
      9,
      -1
    ];

    let grammarRulesymbolArray9 = [
      3,
      10,
      4,
      -1
    ];


    let grammarLalrActionArray0 = [
      new Action(3,1,1),
      new Action(7,1,2),
      new Action(9,1,3),
      new Action(10,3,4),
      new Action(11,3,5),
      new Action(12,3,6),
      new Action(13,3,7),
      new Action(-1,-1,-1)
    ];
    let grammarLalrActionArray1 = [
      new Action(3,1,1),
      new Action(7,1,2),
      new Action(9,1,3),
      new Action(10,3,8),
      new Action(11,3,5),
      new Action(12,3,6),
      new Action(13,3,7),
      new Action(-1,-1,-1)
    ];
    let grammarLalrActionArray2 = [
      new Action(3,1,1),
      new Action(9,1,3),
      new Action(13,3,9),
      new Action(-1,-1,-1)
    ];
    let grammarLalrActionArray3 = [
      new Action(0,2,8),
      new Action(4,2,8),
      new Action(5,2,8),
      new Action(6,2,8),
      new Action(7,2,8),
      new Action(8,2,8),
      new Action(-1,-1,-1)
    ];
    let grammarLalrActionArray4 = [
      new Action(0,4,0),
      new Action(6,1,10),
      new Action(7,1,11),
      new Action(-1,-1,-1)
    ];
    let grammarLalrActionArray5 = [
      new Action(5,1,12),
      new Action(8,1,13),
      new Action(0,2,2),
      new Action(4,2,2),
      new Action(6,2,2),
      new Action(7,2,2),
      new Action(-1,-1,-1)
    ];
    let grammarLalrActionArray6 = [
      new Action(0,2,5),
      new Action(4,2,5),
      new Action(5,2,5),
      new Action(6,2,5),
      new Action(7,2,5),
      new Action(8,2,5),
      new Action(-1,-1,-1)
    ];
    let grammarLalrActionArray7 = [
      new Action(0,2,7),
      new Action(4,2,7),
      new Action(5,2,7),
      new Action(6,2,7),
      new Action(7,2,7),
      new Action(8,2,7),
      new Action(-1,-1,-1)
    ];
    let grammarLalrActionArray8 = [
      new Action(4,1,14),
      new Action(6,1,10),
      new Action(7,1,11),
      new Action(-1,-1,-1)
    ];
    let grammarLalrActionArray9 = [
      new Action(0,2,6),
      new Action(4,2,6),
      new Action(5,2,6),
      new Action(6,2,6),
      new Action(7,2,6),
      new Action(8,2,6),
      new Action(-1,-1,-1)
    ];
    let grammarLalrActionArray10 = [
      new Action(3,1,1),
      new Action(7,1,2),
      new Action(9,1,3),
      new Action(11,3,15),
      new Action(12,3,6),
      new Action(13,3,7),
      new Action(-1,-1,-1)
    ];
    let grammarLalrActionArray11 = [
      new Action(3,1,1),
      new Action(7,1,2),
      new Action(9,1,3),
      new Action(11,3,16),
      new Action(12,3,6),
      new Action(13,3,7),
      new Action(-1,-1,-1)
    ];
    let grammarLalrActionArray12 = [
      new Action(3,1,1),
      new Action(7,1,2),
      new Action(9,1,3),
      new Action(12,3,17),
      new Action(13,3,7),
      new Action(-1,-1,-1)
    ];
    let grammarLalrActionArray13 = [
      new Action(3,1,1),
      new Action(7,1,2),
      new Action(9,1,3),
      new Action(12,3,18),
      new Action(13,3,7),
      new Action(-1,-1,-1)
    ];
    let grammarLalrActionArray14 = [
      new Action(0,2,9),
      new Action(4,2,9),
      new Action(5,2,9),
      new Action(6,2,9),
      new Action(7,2,9),
      new Action(8,2,9),
      new Action(-1,-1,-1)
    ];
    let grammarLalrActionArray15 = [
      new Action(5,1,12),
      new Action(8,1,13),
      new Action(0,2,0),
      new Action(4,2,0),
      new Action(6,2,0),
      new Action(7,2,0),
      new Action(-1,-1,-1)
    ];
    let grammarLalrActionArray16 = [
      new Action(5,1,12),
      new Action(8,1,13),
      new Action(0,2,1),
      new Action(4,2,1),
      new Action(6,2,1),
      new Action(7,2,1),
      new Action(-1,-1,-1)
    ];
    let grammarLalrActionArray17 = [
      new Action(0,2,3),
      new Action(4,2,3),
      new Action(5,2,3),
      new Action(6,2,3),
      new Action(7,2,3),
      new Action(8,2,3),
      new Action(-1,-1,-1)
    ];
    let grammarLalrActionArray18 = [
      new Action(0,2,4),
      new Action(4,2,4),
      new Action(5,2,4),
      new Action(6,2,4),
      new Action(7,2,4),
      new Action(8,2,4),
      new Action(-1,-1,-1)
    ];

    let grammarSymbolArray = [
      /*  0 */
      new Symbol(3,"EOF"),
      /*  1 */
      new Symbol(7,"Error"),
      /*  2 */
      new Symbol(2,"Whitespace"),
      /*  3 */
      new Symbol(1,"("),
      /*  4 */
      new Symbol(1,")"),
      /*  5 */
      new Symbol(1,"*"),
      /*  6 */
      new Symbol(1,"+"),
      /*  7 */
      new Symbol(1,"-"),
      /*  8 */
      new Symbol(1,"/"),
      /*  9 */
      new Symbol(1,"Number"),
      /* 10 */
      new Symbol(0,"Add Exp"),
      /* 11 */
      new Symbol(0,"Mult Exp"),
      /* 12 */
      new Symbol(0,"Negate Exp"),
      /* 13 */
      new Symbol(0,"Value") 
    ];

    let grammarDfaStateArray = [
      /* 0 */
      new DfaState(-1,8,grammarDfaEdgeArray0),
      /* 1 */
      new DfaState(2,1,grammarDfaEdgeArray1),
      /* 2 */
      new DfaState(3,0,grammarDfaEdgeArray2),
      /* 3 */
      new DfaState(4,0,grammarDfaEdgeArray3),
      /* 4 */
      new DfaState(5,0,grammarDfaEdgeArray4),
      /* 5 */
      new DfaState(6,0,grammarDfaEdgeArray5),
      /* 6 */
      new DfaState(7,0,grammarDfaEdgeArray6),
      /* 7 */
      new DfaState(8,0,grammarDfaEdgeArray7),
      /* 8 */
      new DfaState(9,1,grammarDfaEdgeArray8),
      new DfaState(-1,-1,null)
    ];

    let grammarRuleArray = [
      /*  0 */
      new Rule(10,3,grammarRulesymbolArray0,"<Add Exp> ::= <Add Exp> '+' <Mult Exp>"),
      /*  1 */
      new Rule(10,3,grammarRulesymbolArray1,"<Add Exp> ::= <Add Exp> '-' <Mult Exp>"),
      /*  2 */
      new Rule(10,1,grammarRulesymbolArray2,"<Add Exp> ::= <Mult Exp>"),
      /*  3 */
      new Rule(11,3,grammarRulesymbolArray3,"<Mult Exp> ::= <Mult Exp> '*' <Negate Exp>"),
      /*  4 */
      new Rule(11,3,grammarRulesymbolArray4,"<Mult Exp> ::= <Mult Exp> '/' <Negate Exp>"),
      /*  5 */
      new Rule(11,1,grammarRulesymbolArray5,"<Mult Exp> ::= <Negate Exp>"),
      /*  6 */
      new Rule(12,2,grammarRulesymbolArray6,"<Negate Exp> ::= '-' <Value>"),
      /*  7 */
      new Rule(12,1,grammarRulesymbolArray7,"<Negate Exp> ::= <Value>"),
      /*  8 */
      new Rule(13,1,grammarRulesymbolArray8,"<Value> ::= Number"),
      /*  9 */
      new Rule(13,3,grammarRulesymbolArray9,"<Value> ::= '(' <Add Exp> ')'") 
    ];

    let grammarLalrStateArray = [
      /* 0 */
      new LalrState(7,grammarLalrActionArray0),
      /* 1 */
      new LalrState(7,grammarLalrActionArray1),
      /* 2 */
      new LalrState(3,grammarLalrActionArray2),
      /* 3 */
      new LalrState(6,grammarLalrActionArray3),
      /* 4 */
      new LalrState(3,grammarLalrActionArray4),
      /* 5 */
      new LalrState(6,grammarLalrActionArray5),
      /* 6 */
      new LalrState(6,grammarLalrActionArray6),
      /* 7 */
      new LalrState(6,grammarLalrActionArray7),
      /* 8 */
      new LalrState(3,grammarLalrActionArray8),
      /* 9 */
      new LalrState(6,grammarLalrActionArray9),
      /* 10 */
      new LalrState(6,grammarLalrActionArray10),
      /* 11 */
      new LalrState(6,grammarLalrActionArray11),
      /* 12 */
      new LalrState(5,grammarLalrActionArray12),
      /* 13 */
      new LalrState(5,grammarLalrActionArray13),
      /* 14 */
      new LalrState(6,grammarLalrActionArray14),
      /* 15 */
      new LalrState(6,grammarLalrActionArray15),
      /* 16 */
      new LalrState(6,grammarLalrActionArray16),
      /* 17 */
      new LalrState(6,grammarLalrActionArray17),
      /* 18 */
      new LalrState(6,grammarLalrActionArray18),
      new LalrState(-1,null)
    ];

    this.grammar = new Grammar();

    /* CaseSensitive */
    //this.grammar.caseSensitive = ;
    /* InitialSymbol */
    //this.grammar.initialSymbol = ;
    /* InitialDfaState */
    this.grammar.initialDfaState = 0;
    /* InitialLalrState */
    this.grammar.initialLalrState = 0;
    /* SymbolCount */
    this.grammar.symbolCount = 14;
    /* symbolArray */
    this.grammar.symbolArray = grammarSymbolArray;
    /* RuleCount */
    this.grammar.ruleCount = 10;
    /* ruleArray */
    this.grammar.ruleArray = grammarRuleArray;
    /* DfaStateCount */
    this.grammar.dfaStateCount = 9;
    /* DfaArray */
    this.grammar.dfaArray = grammarDfaStateArray;
    /* LalrStateCount */
    this.grammar.lalrStateCount = 19;
    /* LalrArray */
    this.grammar.lalrArray = grammarLalrStateArray;

    this.ruleJumpTable = [
      /* 0. <Add Exp> ::= <Add Exp> '+' <Mult Exp> */
      'rule_AddExp_Plus',
      /* 1. <Add Exp> ::= <Add Exp> '-' <Mult Exp> */
      'rule_AddExp_Minus',
      /* 2. <Add Exp> ::= <Mult Exp> */
      'rule_AddExp',
      /* 3. <Mult Exp> ::= <Mult Exp> '*' <Negate Exp> */
      'rule_MultExp_Times',
      /* 4. <Mult Exp> ::= <Mult Exp> '/' <Negate Exp> */
      'rule_MultExp_Div',
      /* 5. <Mult Exp> ::= <Negate Exp> */
      'rule_MultExp',
      /* 6. <Negate Exp> ::= '-' <Value> */
      'rule_NegateExp_Minus',
      /* 7. <Negate Exp> ::= <Value> */
      'rule_NegateExp',
      /* 8. <Value> ::= Number */
      'rule_Value_Number',
      /* 9. <Value> ::= '(' <Add Exp> ')' */
      'rule_Value_LParen_RParen' 
    ];

  }

}

module.exports = BaseCalc;
